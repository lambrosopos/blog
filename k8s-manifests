apiVersion: v1
items:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml --controller deployment --out k8s-manifests
        kompose.version: 1.26.0 (40646f47)
      creationTimestamp: null
      labels:
        io.kompose.service: blog-app
      name: blog-app
    spec:
      ports:
        - name: "80"
          port: 80
          targetPort: 8000
      selector:
        io.kompose.service: blog-app
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml --controller deployment --out k8s-manifests
        kompose.version: 1.26.0 (40646f47)
      creationTimestamp: null
      labels:
        io.kompose.service: postgres
      name: postgres
    spec:
      ports:
        - name: "5432"
          port: 5432
          targetPort: 5432
      selector:
        io.kompose.service: postgres
    status:
      loadBalancer: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml --controller deployment --out k8s-manifests
        kompose.version: 1.26.0 (40646f47)
      creationTimestamp: null
      labels:
        io.kompose.service: blog-app
      name: blog-app
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: blog-app
      strategy:
        type: Recreate
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose.yml --controller deployment --out k8s-manifests
            kompose.version: 1.26.0 (40646f47)
          creationTimestamp: null
          labels:
            io.kompose.service: blog-app
        spec:
          containers:
            - args:
                - sh
                - -c
                - |-
                  sleep 10 &&
                         python manage.py makemigrations &&
                         python manage.py migrate &&
                         gunicorn -b 0.0.0.0:8000 blog_site.wsgi:application
              image: blog-app
              name: blog-app
              ports:
                - containerPort: 8000
              resources: {}
              volumeMounts:
                - mountPath: /blog-app
                  name: blog-app-claim0
          restartPolicy: Always
          volumes:
            - name: blog-app-claim0
              persistentVolumeClaim:
                claimName: blog-app-claim0
    status: {}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: blog-app-claim0
      name: blog-app-claim0
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml --controller deployment --out k8s-manifests
        kompose.version: 1.26.0 (40646f47)
      creationTimestamp: null
      labels:
        io.kompose.service: postgres
      name: postgres
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: postgres
      strategy:
        type: Recreate
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose.yml --controller deployment --out k8s-manifests
            kompose.version: 1.26.0 (40646f47)
          creationTimestamp: null
          labels:
            io.kompose.service: postgres
        spec:
          containers:
            - env:
                - name: POSTGRES_DB
                  value: blog_db
                - name: POSTGRES_PASSWORD
                  value: postgres
                - name: POSTGRES_USER
                  value: postgres
              image: postgres:13
              livenessProbe:
                exec:
                  command:
                    - pg_isready
                    - -U
                    - postgres
                failureThreshold: 5
                periodSeconds: 5
              name: postgres
              ports:
                - containerPort: 5432
              resources: {}
              volumeMounts:
                - mountPath: /var/lib/postgresql/data
                  name: postgres-db-volume
          restartPolicy: Always
          volumes:
            - name: postgres-db-volume
              persistentVolumeClaim:
                claimName: postgres-db-volume
    status: {}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: postgres-db-volume
      name: postgres-db-volume
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
    status: {}
kind: List
metadata: {}

